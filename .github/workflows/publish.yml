name: Publish to PyPi

on: [push, pull_request]

# Thanks to https://github.com/pypa/cibuildwheel/blob/main/examples/github-deploy.yml
jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - run: pip install pipx

      - name: Build wheels
        run: pipx run cibuildwheel==2.7.0
        env:
          CIBW_BUILD: "cp3{7,8,9,10}*"
          CIBW_SKIP: "*musllinux*"
          CIBW_ARCHS: x86_64
          # Note: We need 2_28 because libcaer requires recent linux headers
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_BEFORE_BUILD: .github/deps/manylinux_dependencies.sh
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: 'LD_LIBRARY_PATH=/libtorch/lib:${LD_LIBRARY_PATH} auditwheel repair -w {dest_dir} {wheel}'

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  # build-wheels-aarch64:
  #   name: Build ARM wheels
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: uraimo/run-on-arch-action@v2
  #       name: Run commands
  #       id: runcmd
  #       with:
  #         arch: aarch64
  #         distro: ubuntu22.04

  #         # Not required, but speeds up builds by storing container images in
  #         # a GitHub package registry.
  #         githubToken: ${{ github.token }}
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.x
  #     - run: pip install pipx

  #     - name: Build wheels
  #       run: pipx run cibuildwheel==2.7.0
  #       env:
  #         CIBW_BUILD: "cp3{7,8,9,10}"
  #         CIBW_SKIP: "*musllinux*"
  #         CIBW_ARCHS: aarch64
  #         # Note: We need 2_28 because libcaer requires recent linux headers
  #         CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
  #         CIBW_BEFORE_BUILD: .github/deps/manylinux_dependencies.sh
  #         CIBW_REPAIR_WHEEL_COMMAND_LINUX: 'LD_LIBRARY_PATH=/libtorch/lib:${LD_LIBRARY_PATH} auditwheel repair -w {dest_dir} {wheel}'

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         path: ./wheelhouse/*.whl


  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - run: pip install pipx

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  publish-pypi:
    #needs: [build-wheels, build-wheels-aarch64, build-sdist]
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/